# -*- coding: utf-8 -*-
"""C√≥digo do Dashboard do D√≥lar

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w5-TQGrheVUzRrt4M12E8eDgPm75nO7e
"""

!pip install streamlit pandas plotly yfinance

# dashboard_dolar.py

import streamlit as st
import pandas as pd
import yfinance as yf
import plotly.express as px
from datetime import datetime

# --- 1. Configura√ß√µes da P√°gina ---
st.set_page_config(
    layout="wide",
    page_title="Dashboard Hist√≥rico do D√≥lar",
    page_icon="üíµ"
)

# --- 2. T√≠tulo e Introdu√ß√£o ---
st.title("üìà Dashboard Hist√≥rico: O D√≥lar nos √öltimos 10 Anos")
st.markdown("""
Esta visualiza√ß√£o interativa mostra a trajet√≥ria da cota√ß√£o do **D√≥lar (USD)** em rela√ß√£o ao **Real (BRL)** desde junho de 2015.
Passe o mouse sobre o gr√°fico para ver os valores e use os bot√µes para navegar. As linhas verticais marcam eventos cruciais que impactaram a economia brasileira.
""")

# --- 3. Carregamento e Cache dos Dados ---
@st.cache_data
def carregar_dados(data_inicio, data_fim):
    try:
        dados = yf.download('BRL=X', start=data_inicio, end=data_fim, auto_adjust=True)
        if dados.empty:
            st.warning("N√£o foram encontrados dados para o per√≠odo selecionado. Verifique a conex√£o com a internet.")
            return pd.DataFrame()
        dados_limpos = pd.DataFrame()
        dados_limpos['Cota√ß√£o'] = dados['Close']  # Garante que √© 1D
        dados_limpos.index.name = 'Date'  # Nomeia o √≠ndice para manter consist√™ncia
        return dados_limpos
    except Exception as e:
        st.error(f"Ocorreu um erro ao buscar os dados no Yahoo Finance: {e}")
        return pd.DataFrame()

data_inicio = '2015-06-01'
data_fim = datetime.now().strftime('%Y-%m-%d')
dados_dolar = carregar_dados(data_inicio, data_fim)

# --- 4. Cria√ß√£o do Gr√°fico (se os dados foram carregados) ---
if not dados_dolar.empty:
    eventos = [
        {'data': '2016-08-31', 'evento': 'Impeachment de Dilma Rousseff', 'posicao_y': 3.5},
        {'data': '2018-05-21', 'evento': 'Greve dos Caminhoneiros', 'posicao_y': 3.8},
        {'data': '2020-03-11', 'evento': 'OMS declara pandemia de COVID-19', 'posicao_y': 5.0},
        {'data': '2020-05-18', 'evento': 'Pico do D√≥lar (Pandemia)', 'posicao_y': 5.95},
        {'data': '2021-01-01', 'evento': 'In√≠cio do ciclo de alta da infla√ß√£o', 'posicao_y': 5.5},
        {'data': '2022-02-24', 'evento': 'In√≠cio da Guerra na Ucr√¢nia', 'posicao_y': 4.9},
        {'data': '2022-10-30', 'evento': 'Elei√ß√µes Presidenciais (2¬∫ Turno)', 'posicao_y': 5.4},
        {'data': '2023-04-01', 'evento': 'Apresenta√ß√£o do Arcabou√ßo Fiscal', 'posicao_y': 4.95}
    ]

    # Corrige o √≠ndice para usar como eixo X
    dados_dolar = dados_dolar.reset_index()

    # Cria o gr√°fico
    fig = px.line(
        dados_dolar,
        x='Date',
        y='Cota√ß√£o',
        title='Cota√ß√£o do D√≥lar (USD para BRL) ao Longo do Tempo',
        labels={'Date': 'Data', 'Cota√ß√£o': 'Valor em R$'}
    )

    # Adiciona eventos hist√≥ricos ao gr√°fico
    for evento in eventos:
        fig.add_vline(x=evento['data'], line_width=1, line_dash="dash", line_color="red")
        fig.add_annotation(
            x=evento['data'], y=evento['posicao_y'], text=evento['evento'],
            showarrow=True, arrowhead=2, ax=0, ay=-40,
            bordercolor="#c7c7c7", borderwidth=1, borderpad=4,
            bgcolor="#ff7f0e", opacity=0.8
        )

    fig.update_layout(
        xaxis_title="Data",
        yaxis_title="Cota√ß√£o (R$)",
        font=dict(family="Arial, sans-serif", size=12, color="#333"),
        hovermode="x unified"
    )

    st.plotly_chart(fig, use_container_width=True)

    # --- 5. Detalhamento dos Eventos ---
    st.header("Entenda os Eventos Marcados")
    st.markdown("Clique em cada evento para saber mais sobre o contexto da √©poca.")
    for evento in sorted(eventos, key=lambda e: e['data']):
        data_formatada = pd.to_datetime(evento['data']).strftime('%d/%m/%Y')
        with st.expander(f"üóìÔ∏è **{data_formatada}**: {evento['evento']}"):
            if evento['evento'] == 'Impeachment de Dilma Rousseff':
                st.write("O processo de impeachment gerou grande instabilidade pol√≠tica e econ√¥mica...")
            elif evento['evento'] == 'Greve dos Caminhoneiros':
                st.write("A paralisa√ß√£o de 11 dias causou uma crise de abastecimento...")
            elif evento['evento'] == 'OMS declara pandemia de COVID-19':
                st.write("O in√≠cio da crise sanit√°ria global provocou uma corrida mundial por d√≥lares...")
            elif evento['evento'] == 'Pico do D√≥lar (Pandemia)':
                st.write("Em meio ao auge das incertezas da pandemia e ru√≠dos pol√≠ticos internos...")
            elif evento['evento'] == 'In√≠cio do ciclo de alta da infla√ß√£o':
                st.write("A infla√ß√£o persistente no Brasil e no mundo levou o Banco Central...")
            elif evento['evento'] == 'In√≠cio da Guerra na Ucr√¢nia':
                st.write("O conflito aumentou os pre√ßos das commodities...")
            elif evento['evento'] == 'Elei√ß√µes Presidenciais (2¬∫ Turno)':
                st.write("Per√≠odos eleitorais s√£o marcados por alta volatilidade...")
            elif evento['evento'] == 'Apresenta√ß√£o do Arcabou√ßo Fiscal':
                st.write("A proposta de uma nova regra para controlar as contas p√∫blicas...")

# --- 6. Rodap√© ---
st.markdown("---")
st.info